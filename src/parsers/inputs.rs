#[derive(Debug, Copy, Clone)]
pub enum ZettInput {
    Single(u8), // One button or trigger with room for one action
    Axis(u8), // One axis with room for two actions
    Coords(u8, u8), // Two axis with room for four actions
    Quartet(u8, u8, u8, u8), // Four buttons with room for four actions
}

pub fn parse_input(v: &String) -> Option<ZettInput> {
    use ZettInput::*;
    match v.to_lowercase().as_str() {
        "none" => Some(Single(0x00)),
        "exit" => Some(Single(0x01)),
        "actiona" => Some(Single(0x02)),
        "actionb" => Some(Single(0x03)),
        "actionc" => Some(Single(0x04)),
        "actionh" => Some(Single(0x05)),
        "actionv" => Some(Single(0x06)),
        "actiond" => Some(Single(0x07)),
        "menul" => Some(Single(0x08)),
        "menur" => Some(Single(0x09)),
        "joy" => Some(Single(0x0a)),
        "cam" => Some(Single(0x0b)),
        "bumperl" => Some(Single(0x0c)),
        "bumperr" => Some(Single(0x0d)),
        "triggerl" => Some(Single(0x0e)),
        "triggerr" => Some(Single(0x0f)),
        "up" => Some(Single(0x10)),
        "down" => Some(Single(0x11)),
        "left" => Some(Single(0x12)),
        "right" => Some(Single(0x13)),
        "hatup" => Some(Single(0x14)),
        "hatdown" => Some(Single(0x15)),
        "hatleft" => Some(Single(0x16)),
        "hatright" => Some(Single(0x17)),
        "micup" => Some(Single(0x18)),
        "micdown" => Some(Single(0x19)),
        "micleft" => Some(Single(0x1a)),
        "micright" => Some(Single(0x1b)),
        "povup" => Some(Single(0x1c)),
        "povdown" => Some(Single(0x1d)),
        "povleft" => Some(Single(0x1e)),
        "povright" => Some(Single(0x1f)),
        "joyx" => Some(Axis(0x20)),
        "joyy" => Some(Axis(0x21)),
        "joyz" => Some(Axis(0x22)),
        "camx" => Some(Axis(0x23)),
        "camy" => Some(Axis(0x24)),
        "camz" => Some(Axis(0x25)),
        "slew" => Some(Single(0x26)),
        "throttle" => Some(Single(0x27)),
        "throttlel" => Some(Single(0x28)),
        "throttler" => Some(Single(0x29)),
        "volume" => Some(Single(0x2a)),
        "wheel" => Some(Single(0x2b)),
        "rudder" => Some(Single(0x2c)),
        "gas" => Some(Single(0x2d)),
        "brake" => Some(Single(0x2e)),
        "micpush" => Some(Single(0x2f)),
        "trigger" => Some(Single(0x30)),
        "bumper" => Some(Single(0x31)),
        "actionl" => Some(Single(0x32)),
        "actionm" => Some(Single(0x33)),
        "actionr" => Some(Single(0x34)),
        "pinky" => Some(Single(0x35)),
        "pinkyforward" => Some(Single(0x36)),
        "pinkybackward" => Some(Single(0x37)),
        "flapsup" => Some(Single(0x38)),
        "flapsdown" => Some(Single(0x39)),
        "boatforward" => Some(Single(0x3a)),
        "boatbackward" => Some(Single(0x3b)),
        "autopilotpath" => Some(Single(0x3c)),
        "autopilotalt" => Some(Single(0x3d)),
        "enginemotorl" => Some(Single(0x3e)),
        "enginemotorr" => Some(Single(0x3f)),
        "enginefuelflowl" => Some(Single(0x40)),
        "enginefuelflowr" => Some(Single(0x41)),
        "engineignitionl" => Some(Single(0x42)),
        "engineignitionr" => Some(Single(0x43)),
        "speedbrakebackward" => Some(Single(0x44)),
        "speedbrakeforward" => Some(Single(0x45)),
        "chinabackward" => Some(Single(0x46)),
        "chinaforward" => Some(Single(0x47)),
        "apu" => Some(Single(0x48)),
        "radaraltimeter" => Some(Single(0x49)),
        "landinggearsilence" => Some(Single(0x4a)),
        "eac" => Some(Single(0x4b)),
        "autopilottoggle" => Some(Single(0x4c)),
        "throttlebutton" => Some(Single(0x4d)),
        "mousex" => Some(Axis(0x4e)),
        "mousey" => Some(Axis(0x4f)),
        "mouse" => Some(Single(0x50)),
        "paddleleft" => Some(Single(0x51)),
        "paddleright" => Some(Single(0x52)),
        "pinkyleft" => Some(Single(0x53)),
        "pinkyright" => Some(Single(0x54)),
        "context" => Some(Single(0x55)),
        "dpi" => Some(Single(0x56)),
        "scrollx" => Some(Axis(0x57)),
        "scrolly" => Some(Axis(0x58)),
        "scroll" => Some(Single(0x59)),
        "trimup" => Some(Single(0x5a)),
        "trimdown" => Some(Single(0x5b)),
        "trimleft" => Some(Single(0x5c)),
        "trimright" => Some(Single(0x5d)),
        "actionwheelx" => Some(Axis(0x5e)),
        "actionwheely" => Some(Axis(0x5f)),
        "joyxy" => Some(Coords(0x20, 0x21)),
        "camxy" => Some(Coords(0x23, 0x24)),
        "mousexy" => Some(Coords(0x4e, 0x4f)),
        "actionwheelxy" => Some(Coords(0x5e, 0x5f)),
        "dpadxy" => Some(Quartet(0x12, 0x13, 0x10, 0x11)),
        "povxy" => Some(Quartet(0x1e, 0x1f, 0x1c, 0x1d)),
        "hatxy" => Some(Quartet(0x16, 0x17, 0x14, 0x15)),
        "micxy" => Some(Quartet(0x1a, 0x1b, 0x18, 0x19)),
        unknown => {
            match unknown.parse::<u8>() {
                Ok(num) => { Some(Single(num & !0x80)) },
                _ => None,
            }
        },
    }
}
